#
# Copyright (C) 2022 Ing <https://github.com/wjz304>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: Data
on:
  release:
    types:
      - created

  workflow_dispatch:
    inputs:
      push:
        description: "push"
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: main

      - name: Init Env
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          sudo timedatectl set-timezone "Asia/Shanghai"

      - name: Delay
        run: |
          echo "Delaying for 1 minutes..."
          sleep 60

      - name: Get Release RR
        run: |
          REPO="${{ github.server_url }}/${{ github.repository }}"
          PRERELEASE="true"

          TAG=""
          if [ "${PRERELEASE}" = "true" ]; then
            TAG="$(curl -skL --connect-timeout 10 "${REPO}/tags" | grep "/refs/tags/.*\.zip" | sed -E 's/.*\/refs\/tags\/(.*)\.zip.*$/\1/' | sort -rV | head -1)"
          else
            TAG="$(curl -skL --connect-timeout 10 -w %{url_effective} -o /dev/null "${REPO}/releases/latest" | awk -F'/' '{print $NF}')"
          fi
          [ "${TAG:0:1}" = "v" ] && TAG="${TAG:1}"
          rm -f rr-${TAG}.img.zip
          STATUS=$(curl -kL --connect-timeout 10 -w "%{http_code}" "${REPO}/releases/download/${TAG}/rr-${TAG}.img.zip" -o "rr-${TAG}.img.zip")
          if [ $? -ne 0 ] || [ ${STATUS:-0} -ne 200 ]; then
            echo "Download failed"
            exit 1
          fi

          unzip rr-${TAG}.img.zip -d "rr"

          export TERM=xterm

          sudo ./localbuild.sh create rr/ws rr/rr.img
          if [ $? -ne 0 ]; then
            echo "create failed"
            exit 1
          fi

      - name: Get data
        run: |
          sudo apt update
          sudo apt install -y locales busybox dialog gettext sed gawk jq curl 
          sudo apt install -y python-is-python3 python3-pip libelf-dev qemu-utils cpio xz-utils lz4 lzma bzip2 gzip zstd
          sudo apt install -y build-essential libtool pkgconf libzstd-dev liblzma-dev libssl-dev  # kmodule dependencies

          # Backup the original python3 executable.
          sudo mv -f "$(realpath $(which python3))/EXTERNALLY-MANAGED" "$(realpath $(which python3))/EXTERNALLY-MANAGED.bak" 2>/dev/null || true
          sudo pip3 install -U -r scripts/requirements.txt

          python3 scripts/func.py getmodels -w "rr/ws/initrd" -j "docs/models.json" -x "docs/models.xlsx"
          python3 scripts/func.py getaddons -w "rr/ws" -j "docs/addons.json" -x "docs/addons.xlsx"
          python3 scripts/func.py getmodules -w "rr/ws" -j "docs/modules.json" -x "docs/modules.xlsx"

          python3 scripts/func.py getpats -w "rr/ws/initrd" -j "docs/pats.json" -x "docs/pats.xlsx"

      - name: Upload to Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: |
            docs/*.json
            docs/*.xlsx
          retention-days: 5

      - name: Check and Push
        if: success() && (inputs.push == true || github.event.action == 'created')
        run: |
            echo "Git push ..."
            # git checkout main
            git pull
            status=$(git status -s | grep -E "docs" | awk '{printf " %s", $2}')
            if [ -n "${status}" ]; then
              git add ${status}
              git commit -m "update $(date +%Y-%m-%d" "%H:%M:%S)"
              git push -f
            fi
